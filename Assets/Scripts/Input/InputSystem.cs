//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace IbragimovAA.Arcanoid
{
    public partial class @InputSystem : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputSystem()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""FirstPlatform"",
            ""id"": ""d89d0b05-d74a-47fe-a8c0-219c1e520fbc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""77f4c9a8-5bef-4155-932d-cb9a5295d980"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""e764335d-3430-4198-9774-3b76c93dcd20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""527907e1-8999-40f3-a486-d58ac28f3a86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""6d4937aa-ee51-4a17-8169-7f30d313d164"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""838533a7-724c-410b-9036-56e25fc08c8a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""ee9b6364-3851-476d-ad4a-a42a1cdf0594"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""33bfc45b-7bd5-410f-ae11-1ad84f136e80"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5d745647-1cb5-4e21-9102-164c13bb49d1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9b6de7c5-20e5-4a3e-a8ac-b70dbb33e83f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38f23bd7-596e-4055-8d7d-2d8ea2b41457"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SecondPlatform"",
            ""id"": ""01ad6656-417d-4902-8c63-ac19e66a13ed"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c067bc4d-949e-4cea-838f-4a5ecf858ea6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""d83b5db1-5def-40a8-9e42-708695e7a425"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""f89fe162-bde6-420e-93be-b245c8f90c19"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""0f3f1d2c-e0b6-41b4-a1ec-1ce480c75a53"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""3cf43770-1f60-4bb2-b5c7-de1d0a80989b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""6a09a72b-ff58-4877-81a6-07c9d3acd74e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""b72feb0b-79f3-4bfa-a292-86c6f323d570"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e78488eb-d523-464f-918a-3e5a77639b7c"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // FirstPlatform
            m_FirstPlatform = asset.FindActionMap("FirstPlatform", throwIfNotFound: true);
            m_FirstPlatform_Movement = m_FirstPlatform.FindAction("Movement", throwIfNotFound: true);
            m_FirstPlatform_Launch = m_FirstPlatform.FindAction("Launch", throwIfNotFound: true);
            m_FirstPlatform_Pause = m_FirstPlatform.FindAction("Pause", throwIfNotFound: true);
            // SecondPlatform
            m_SecondPlatform = asset.FindActionMap("SecondPlatform", throwIfNotFound: true);
            m_SecondPlatform_Movement = m_SecondPlatform.FindAction("Movement", throwIfNotFound: true);
            m_SecondPlatform_Launch = m_SecondPlatform.FindAction("Launch", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // FirstPlatform
        private readonly InputActionMap m_FirstPlatform;
        private IFirstPlatformActions m_FirstPlatformActionsCallbackInterface;
        private readonly InputAction m_FirstPlatform_Movement;
        private readonly InputAction m_FirstPlatform_Launch;
        private readonly InputAction m_FirstPlatform_Pause;
        public struct FirstPlatformActions
        {
            private @InputSystem m_Wrapper;
            public FirstPlatformActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_FirstPlatform_Movement;
            public InputAction @Launch => m_Wrapper.m_FirstPlatform_Launch;
            public InputAction @Pause => m_Wrapper.m_FirstPlatform_Pause;
            public InputActionMap Get() { return m_Wrapper.m_FirstPlatform; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FirstPlatformActions set) { return set.Get(); }
            public void SetCallbacks(IFirstPlatformActions instance)
            {
                if (m_Wrapper.m_FirstPlatformActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnMovement;
                    @Launch.started -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnLaunch;
                    @Launch.performed -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnLaunch;
                    @Launch.canceled -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnLaunch;
                    @Pause.started -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_FirstPlatformActionsCallbackInterface.OnPause;
                }
                m_Wrapper.m_FirstPlatformActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Launch.started += instance.OnLaunch;
                    @Launch.performed += instance.OnLaunch;
                    @Launch.canceled += instance.OnLaunch;
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                }
            }
        }
        public FirstPlatformActions @FirstPlatform => new FirstPlatformActions(this);

        // SecondPlatform
        private readonly InputActionMap m_SecondPlatform;
        private ISecondPlatformActions m_SecondPlatformActionsCallbackInterface;
        private readonly InputAction m_SecondPlatform_Movement;
        private readonly InputAction m_SecondPlatform_Launch;
        public struct SecondPlatformActions
        {
            private @InputSystem m_Wrapper;
            public SecondPlatformActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_SecondPlatform_Movement;
            public InputAction @Launch => m_Wrapper.m_SecondPlatform_Launch;
            public InputActionMap Get() { return m_Wrapper.m_SecondPlatform; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SecondPlatformActions set) { return set.Get(); }
            public void SetCallbacks(ISecondPlatformActions instance)
            {
                if (m_Wrapper.m_SecondPlatformActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_SecondPlatformActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_SecondPlatformActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_SecondPlatformActionsCallbackInterface.OnMovement;
                    @Launch.started -= m_Wrapper.m_SecondPlatformActionsCallbackInterface.OnLaunch;
                    @Launch.performed -= m_Wrapper.m_SecondPlatformActionsCallbackInterface.OnLaunch;
                    @Launch.canceled -= m_Wrapper.m_SecondPlatformActionsCallbackInterface.OnLaunch;
                }
                m_Wrapper.m_SecondPlatformActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Launch.started += instance.OnLaunch;
                    @Launch.performed += instance.OnLaunch;
                    @Launch.canceled += instance.OnLaunch;
                }
            }
        }
        public SecondPlatformActions @SecondPlatform => new SecondPlatformActions(this);
        public interface IFirstPlatformActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnLaunch(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
        public interface ISecondPlatformActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnLaunch(InputAction.CallbackContext context);
        }
    }
}
