//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace IbragimovAA.Arcanoid
{
    public partial class @InputSystem : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputSystem()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Platform"",
            ""id"": ""d89d0b05-d74a-47fe-a8c0-219c1e520fbc"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Button"",
                    ""id"": ""77f4c9a8-5bef-4155-932d-cb9a5295d980"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""type"": ""Button"",
                    ""id"": ""64cc547a-6560-42d6-91af-1e0e0c301961"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Vertical"",
                    ""id"": ""6d4937aa-ee51-4a17-8169-7f30d313d164"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""838533a7-724c-410b-9036-56e25fc08c8a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ee9b6364-3851-476d-ad4a-a42a1cdf0594"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""1ae3e6f3-eddb-4f93-a26e-3fcf53ddd181"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f34d6d6a-7903-4059-883f-4bd4c5ce077d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cb1d9499-d0f2-4f74-9187-884362947f5f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""id"": ""3285d245-b505-4471-a5be-a6ac3f08832d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb2c025d-edec-4416-9dd5-15f70693ccfb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4f06851a-cca5-4075-b6a8-1f72d88e351b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""26fe04f9-b3b0-493c-b2e4-f3b45ddd2a43"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""82e9246d-40ca-4e41-991d-27b9b8da4c64"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5eb54201-af96-43ee-a2e4-26ec9726c2ee"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Platform
            m_Platform = asset.FindActionMap("Platform", throwIfNotFound: true);
            m_Platform_WASD = m_Platform.FindAction("WASD", throwIfNotFound: true);
            m_Platform_Arrows = m_Platform.FindAction("Arrows", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Platform
        private readonly InputActionMap m_Platform;
        private IPlatformActions m_PlatformActionsCallbackInterface;
        private readonly InputAction m_Platform_WASD;
        private readonly InputAction m_Platform_Arrows;
        public struct PlatformActions
        {
            private @InputSystem m_Wrapper;
            public PlatformActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @WASD => m_Wrapper.m_Platform_WASD;
            public InputAction @Arrows => m_Wrapper.m_Platform_Arrows;
            public InputActionMap Get() { return m_Wrapper.m_Platform; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlatformActions set) { return set.Get(); }
            public void SetCallbacks(IPlatformActions instance)
            {
                if (m_Wrapper.m_PlatformActionsCallbackInterface != null)
                {
                    @WASD.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnWASD;
                    @WASD.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnWASD;
                    @WASD.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnWASD;
                    @Arrows.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnArrows;
                    @Arrows.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnArrows;
                    @Arrows.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnArrows;
                }
                m_Wrapper.m_PlatformActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @WASD.started += instance.OnWASD;
                    @WASD.performed += instance.OnWASD;
                    @WASD.canceled += instance.OnWASD;
                    @Arrows.started += instance.OnArrows;
                    @Arrows.performed += instance.OnArrows;
                    @Arrows.canceled += instance.OnArrows;
                }
            }
        }
        public PlatformActions @Platform => new PlatformActions(this);
        public interface IPlatformActions
        {
            void OnWASD(InputAction.CallbackContext context);
            void OnArrows(InputAction.CallbackContext context);
        }
    }
}
